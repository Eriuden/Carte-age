{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\antoi\\\\Desktop\\\\Projet Cartes \\xE2ge\\\\Carte_age\\\\front\\\\src\\\\Components\\\\Card\\\\Card.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { addToCart } from '../../redux/actions/cartAction';\nimport { useDispatch } from \"react-redux\";\nimport '../../App.css';\nimport { config } from '../../config';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Card(props) {\n  _s();\n\n  //Au final, ce composant servira surtout à créer un cadre en CSS\n  const [min, setMin] = useState(0);\n  const [max, setMax] = useState(20);\n  const [cardsList, setCardsList] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [quantity, setQuantity] = useState(\"\");\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch(); //il faudra déplacer tout ça\n\n  const onClickAddCart = cards => {\n    console.log(cards);\n    console.log(quantity);\n\n    if (quantity !== \"\" && !isNaN(quantity)) {\n      // setIsPopUp( true)\n      dispatch(addToCart(props.cartInfos, cards, quantity));\n    } else {\n      setError({\n        error: \"Entrez une valeur correcte (chiffre)\"\n      });\n    }\n\n    setQuantity(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: \"card\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Card, \"Ql2cdijotAGak7ZKPncDGRzFQ2k=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["C:/Users/antoi/Desktop/Projet Cartes âge/Carte_age/front/src/Components/Card/Card.js"],"names":["React","useEffect","addToCart","useDispatch","config","useState","Card","props","min","setMin","max","setMax","cardsList","setCardsList","isLoading","setIsLoading","quantity","setQuantity","error","setError","dispatch","onClickAddCart","cards","console","log","isNaN","cartInfos"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SAASC,WAAT,QAA2B,aAA3B;AACA,OAAO,eAAP;AACA,SAASC,MAAT,QAAuB,cAAvB;AAGA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAEjB;AAEA,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBJ,QAAQ,CAAC,CAAD,CAA9B;AACA,QAAM,CAACK,GAAD,EAAMC,MAAN,IAAgBN,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;AAEA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACH,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,IAAD,CAAlC;AAEG,QAAMe,QAAQ,GAAGjB,WAAW,EAA5B,CAZiB,CAcjB;;AAED,QAAMkB,cAAc,GAAIC,KAAD,IAAW;AACjCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYR,QAAZ;;AACA,QAAGA,QAAQ,KAAK,EAAb,IAAmB,CAACS,KAAK,CAACT,QAAD,CAA5B,EAAwC;AACpC;AACAI,MAAAA,QAAQ,CAAClB,SAAS,CAACK,KAAK,CAACmB,SAAP,EAAkBJ,KAAlB,EAAyBN,QAAzB,CAAV,CAAR;AACH,KAHD,MAGO;AACHG,MAAAA,QAAQ,CAAC;AAACD,QAAAA,KAAK,EAAE;AAAR,OAAD,CAAR;AACH;;AACDD,IAAAA,WAAW,CAAC,EAAD,CAAX;AACH,GAVE;;AAaC,sBACI;AAAS,IAAA,SAAS,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAlCQX,I;UAYYH,W;;;KAZZG,I;AAoCT,eAAeA,IAAf","sourcesContent":["import React, {useEffect} from 'react'\r\nimport { addToCart } from '../../redux/actions/cartAction'\r\nimport { useDispatch} from \"react-redux\"\r\nimport '../../App.css'\r\nimport { config } from '../../config'\r\n\r\n\r\nimport { useState } from 'react'\r\n\r\nfunction Card(props) {\r\n\r\n    //Au final, ce composant servira surtout à créer un cadre en CSS\r\n\r\n    const [min, setMin] = useState(0);\r\n    const [max, setMax] = useState(20);\r\n    const [cardsList, setCardsList] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    const [quantity, setQuantity] = useState(\"\");\r\n\tconst [error, setError] = useState(null);\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    //il faudra déplacer tout ça\r\n   \r\n   const onClickAddCart = (cards) => {\r\n    console.log(cards);\r\n    console.log(quantity);\r\n    if(quantity !== \"\" && !isNaN(quantity)) {\r\n        // setIsPopUp( true)\r\n        dispatch(addToCart(props.cartInfos, cards, quantity))\r\n    } else {\r\n        setError({error: \"Entrez une valeur correcte (chiffre)\"})\r\n    }\r\n    setQuantity(\"\")\r\n}\r\n\r\n\r\n    return (\r\n        <article className='card'>\r\n            \r\n        </article>\r\n    )\r\n}\r\n\r\nexport default Card"]},"metadata":{},"sourceType":"module"}